// <auto-generated />
using System;
using IMDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IMDB.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20211126150328_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("IMDB.Entities.Crew", b =>
                {
                    b.Property<int>("CrewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CrewAge")
                        .HasColumnType("int");

                    b.Property<string>("CrewBio")
                        .HasColumnType("text");

                    b.Property<string>("CrewName")
                        .HasColumnType("text");

                    b.Property<string>("CrewSurname")
                        .HasColumnType("text");

                    b.HasKey("CrewID");

                    b.ToTable("Crew");
                });

            modelBuilder.Entity("IMDB.Entities.CrewMovie", b =>
                {
                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("CrewId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("CrewMovies");
                });

            modelBuilder.Entity("IMDB.Entities.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.HasKey("LocationID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("IMDB.Entities.LocationMovie", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("LocationId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("LocationMovies");
                });

            modelBuilder.Entity("IMDB.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("IMDB.Entities.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ReviewPerson")
                        .HasColumnType("text");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text");

                    b.HasKey("ReviewID");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("IMDB.Entities.ReviewMovie", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ReviewId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ReviewMovies");
                });

            modelBuilder.Entity("IMDB.Entities.CrewMovie", b =>
                {
                    b.HasOne("IMDB.Entities.Crew", "crew")
                        .WithMany("MovieActors")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDB.Entities.Movie", "movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("crew");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("IMDB.Entities.LocationMovie", b =>
                {
                    b.HasOne("IMDB.Entities.Location", "location")
                        .WithMany("MovieLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDB.Entities.Movie", "movie")
                        .WithMany("MovieLocations")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("IMDB.Entities.ReviewMovie", b =>
                {
                    b.HasOne("IMDB.Entities.Movie", "movie")
                        .WithMany("MovieReviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDB.Entities.Review", "review")
                        .WithMany("MovieReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("review");
                });

            modelBuilder.Entity("IMDB.Entities.Crew", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("IMDB.Entities.Location", b =>
                {
                    b.Navigation("MovieLocations");
                });

            modelBuilder.Entity("IMDB.Entities.Movie", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("MovieLocations");

                    b.Navigation("MovieReviews");
                });

            modelBuilder.Entity("IMDB.Entities.Review", b =>
                {
                    b.Navigation("MovieReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
